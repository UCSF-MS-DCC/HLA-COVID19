class QueryController < ApplicationController
    protect_from_forgery with: :null_session, if: Proc.new {|c| c.request.format.json? }
    acts_as_token_authentication_handler_for User, fallback: :none

    def data
        puts "PARAMS: #{params.to_json}"
        if !current_user
            puts params[:user_token]
            puts query_params.to_json
            @user = User.find_by(email:params["user_email"])
            puts "@USER: #{@user.to_json}"
            puts 
        else
            puts "CURRENT_USER: #{current_user.to_json}"
        end
        @subjects = Subject.accessible_by(current_ability)
        respond_to do |format|
            format.json { render json: @subjects, each_serializer:SubjectSerializer, hla:query_params[:hlas], c19_symptoms:query_params[:c19_symptoms],
                treatments:query_params[:treatments], hospitalizations: query_params[:hospitalizations], risk_factors:query_params[:risk_factors],
                lab_tests:query_params[:lab_tests], comorbidities:query_params[:comorbidities], status: :ok }
        end
    end
    # endpoint for importing HLA from csv file generated by the HIBAGgerVance shiny app.
    def import_hla
        subject = Subject.accessible_by(current_ability).find_by(origin_identifier:import_params[:origin_identifier])
        message = ""
        success = false
        if !subject
            message += "Can't find subject or don't have permission to manage data for subject. "
        else
            message += "Subject found, attempting to insert HLA. "
            puts message
            p = import_params.except(:origin_identifier)
            p[:subject_id] = subject.id
            h = Hla.new(p)
            if h.save
                message += "HLA successfully added for #{subject[:origin_identifier]}"
                success = true
            else
                message += "There was a problem adding HLA for #{subject[:origin_identifier]}. Error(s): #{h.errors.full_messages}"
            end
            if success == true
                render json: {"message": message}, status: :created
            else
                render json: {"message": message}, status: :unprocessable_entity
            end
        end
    end

    private

    def query_params
        params.permit(:subjects, :c19_symptoms, :hlas, :hospitalizations, :lab_tests, :treatments, :risk_factors, :comorbidites)
    end

    def import_params
        params.permit(:origin_identifier, :drb1_1, :drb1_2, :dqb1_1, :dqb1_2, :dpb1_1, :dpb1_2, :a_1, :a_2, :b_1, :b_2, :c_1, :c_2,
                    :dpa1_1, :dpa1_2, :dra1_1, :dqa1_1, :dqa1_2, :dra1_2, :drbo_1, :drbo_2)
    end

end