class QueryController < ApplicationController
    protect_from_forgery with: :null_session, if: Proc.new {|c| c.request.format.json? }
    acts_as_token_authentication_handler_for User

    def data
        if !current_user
            @user = User.find_by(email:params["user_email"])
        else
        end
        table = nil
        if query_params[:data].include? "_"
            table = query_params[:data].split("_").map{ |w| w.capitalize }.map{ |w| w.singularize }.join.safe_constantize
        else
            table = query_params[:data].capitalize.singularize.safe_constantize
        end
        # Explicitly limit access to Subjects and associatied tables. No one should be able to get Users table through this endpoint.
        servable_tables = ["C19Symptom", "Comorbidity", "Hla", "Hospitalization", "Kir", "LabTest", "RiskFactor", "Subject", "Treatment"]

        @serializer = "#{table.to_s}Serializer".constantize
        @subjects = Subject.accessible_by(current_ability)
        @records = (table.to_s == "Subject") ? @subjects : table.where(subject_id:@subjects.pluck(:id) )
        respond_to do |format|
            if servable_tables.include? table.to_s
                if @records.count > 0
                    format.json {render json: @records, each_serializer:@serializer, status: :ok }
                else
                    format.json {render json: '{ "message" : "No records available for this query."}', status: :no_content }
                end
            else
                format.json { render json: '{ "message" : "Could not complete your query"}', status: :unprocessable_entity }
            end
        end
    end

    # endpoint for importing HLA from csv file generated by the hibag and omixon imputation apps.
    def import_hla
        @message = ""
        if !import_hla_params[:project_name]
            @message += "No project name, cannot load data."
            @project = nil
        elsif !current_user.projects.find_by(name:import_hla_params[:project_name]).nil?
            @project = current_user.projects.find_by(name:import_hla_params[:project_name])
            @message += " User project #{import_hla_params[:project_name]} found."
        end
        if @project
            @subject = @project.subjects.find_by(origin_identifier:import_hla_params[:origin_identifier])
            if !@subject.nil?
                @message += " Subject #{import_hla_params[:origin_identifier]} found."
            else
                @message += " Subject #{import_hla_params[:origin_identifier]} not found."
            end
        else
            @message += " User project #{import_hla_params[:project_name]} not found."
            @subject = nil
        end
        #subject = Subject.accessible_by(current_ability).find_by(origin_identifier:import_params[:origin_identifier], project_name:import_params[:project_name])
        success = false
        if @subject 
            if !@subject.hla.nil?
                @message += " Subject has an existing HLA record. Contact the admin to update this record."
            else
                new_hla_params = import_hla_params.except(:origin_identifier, :project_name)
                new_hla_params[:subject_id] = @subject.id
                hla = Hla.new(new_hla_params)
                if hla.save
                    success = true
                    @message += " Successfully inserted values #{p.except(:subject_id)}."
                    unless !import_hla_params[:typing_method_name]
                        if import_hla_params[:typing_method_name] == 'HIBAG'
                            imputation_metadata_params = import_stats_params
                            imputation_metadata_params[:hla_id] = hla.id
                            @imp_stat = Imputationstat.new(imputation_metadata_params)

                        elsif import_hla_params[:typing_method_name] == 'OMIXON'
                            imputation_metadata_params = omixon_stats_params
                            imputation_metadata_params[:hla_id] = hla.id
                            @imp_stat = ReadCount.new(imputation_metadata_params)
                        else
                            @message += " The typing method name #{import_hla_params[:typing_method_name]} is not recognized."
                        end
                        if @imp_stat && @imp_stat.save
                            @message += " Successfully added imputation metadata for this #{import_hla_params[:typing_method_name]}-imputed HLA."
                        else 
                            @message += " imputation metadata data was not added for this #{import_hla_params[:typing_method_name]}-imputed HLA."
                        end
                    end
                else
                    @message += " There was a problem adding HLA for #{@subject[:origin_identifier]}. Error(s): #{hla.errors.full_messages}"
                end
            end
        end
        if success == true
            render json: {"log_message": @message}, status: :created
        else
            render json: {"log_message": @message}, status: :unprocessable_entity
        end
    end

    def hibag_preflight # this method checks that an identified user is permitted to use the HLA imputation tool and has a project in the database
        response_params = {}
        if preflight_params[:email] && User.find_by(email:preflight_params[:email], approved:true, can_upload:true)
            @user = User.find_by(email:preflight_params[:email], approved:true, can_upload:true)
            response_params[:user_approved] = true
        else
            response_params[:user_approved] = false
        end
        if preflight_params[:project_name] && @user && @user.projects.size > 0 && @user.projects.find_by(name:preflight_params[:project_name])
            response_params[:project_found] = true
            @project = @user.projects.find_by(name:preflight_params[:project_name])
        else
            response_params[:project_found] = false
        end
        if preflight_params[:origin_identifiers] && preflight_params[:origin_identifiers].size > 0
            response_params[:origin_identifiers] = {}
            preflight_params[:origin_identifiers].each do |oi|
                if Subject.find_by(origin_identifier:oi)
                    response_params[:origin_identifiers][oi] = "valid"
                else
                    response_params[:origin_identifiers][oi] = "invalid"
                end
            end
        end
        render json: response_params, status: :ok
    end

    def user_key #LOCK THIS DOWN TO THE HLA SIDE LOADER ACCOUNT
        @key = nil
        if current_user.system_user == true
            if user_key_params[:email] && User.find_by(email:user_key_params[:email])
                user = User.find_by(email:user_key_params[:email])
                @key = user.authentication_token
            end
        end
        if @key.nil?
            render json: {"message": "Key not found"}, status: :not_acceptable
        else
            render json: {"key": @key}, status: :ok
        end 
    end

    private

    def query_params
        params.permit(:data)
    end

    def import_hla_params
        params.permit(:origin_identifier, :project_name, :drb1_1, :drb1_2, :dqb1_1, :dqb1_2, :dpb1_1, :dpb1_2, :a_1, :a_2, :b_1, :b_2, :c_1, :c_2,
                    :dpa1_1, :dpa1_2, :dra1_1, :dqa1_1, :dqa1_2, :dra1_2, :drbo_1, :drbo_2, :drb345_1, :drb345_2, :reference_database, :reference_database_version,
                    :typing_method_name, :typing_method_version, :gl_string, :novel_polymorphisms, :pop)
    end
    def import_stats_params
        params.permit(:a_prob, :a_matching, :b_prob, :b_matching, :c_prob, :c_matching, :typing_method_name, :typing_method_version,
        :drb1_prob, :drb1_matching, :dqa1_prob, :dqa1_matching, :dqb1_prob, :dqb1_matching, :dpb1_prob, :dpb1_matching)
    end
    def omixon_stats_params
        params.permit(:hla_a,:hla_b,:hla_c,:hla_dpa1,:hla_dpb1,:hla_dqa1,:hla_dqb1,:hla_drb1,:hla_drb3,:hla_drb4,:hla_drb5)
    end
    def preflight_params
        params.permit(:email, :project_name, origin_identifiers: [])
    end
    def user_key_params
        params.permit(:email)
    end

end
